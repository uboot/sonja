function ThrowOnNonZero {
    if (-not $$?) {
        throw 'Last command failed'
    }
}

echo '### Setup MTU ###'
echo 'Set mtu=$mtu'
$$adapters = $$(Get-NetAdapter | Where { $$_.Name -Match 'Ethernet' }).Name
$$adapters | ForEach-Object({
    netsh interface ipv4 set subinterface "$$_" mtu=$mtu store=persistent
})

echo '### Setup git ###'
mkdir -p "$$env:userprofile\.ssh"; ThrowOnNonZero
Copy-Item "$build_package_dir\id_rsa" -Destination "$$env:userprofile\.ssh"; ThrowOnNonZero
Copy-Item "$build_package_dir\known_hosts" -Destination "$$env:userprofile\.ssh"; ThrowOnNonZero
git config --global advice.detachedHead false
git config --global credential.helper $escaped_build_package_dir/credential_helper.sh; ThrowOnNonZero

echo '### Setup Conan ###'
conan config install $conan_config_args; ThrowOnNonZero

echo '# Setup Conan user'
conan user -r $conan_remote -p $conan_password $conan_user; ThrowOnNonZero

echo '### Clone repository ###'
mkdir sonja; ThrowOnNonZero
cd sonja; ThrowOnNonZero
git init; ThrowOnNonZero
git remote add origin $git_url; ThrowOnNonZero
git fetch origin $git_sha; ThrowOnNonZero
git checkout FETCH_HEAD; ThrowOnNonZero

echo '### Build package ###'
mkdir -p "$build_output_dir"; ThrowOnNonZero
$$package_name=[string](conan inspect --raw name $path); ThrowOnNonZero
$$package_version=[string](conan inspect --raw version $path); ThrowOnNonZero
conan create -pr $conan_profile $conan_options --json $build_output_dir/create.json $path @$sonja_user/$channel; ThrowOnNonZero

echo '### Collect package data ###'
conan info -pr $conan_profile $conan_options --json $build_output_dir/info.json $$package_name/$$package_version@$sonja_user/$channel; ThrowOnNonZero

echo '### Upload package ###'
conan upload $$package_name/$$package_version@$sonja_user/$channel --all --confirm -r $conan_remote; ThrowOnNonZero