# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UserAttributesPermissions(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, permission: str=None):  # noqa: E501
        """UserAttributesPermissions - a model defined in Swagger

        :param permission: The permission of this UserAttributesPermissions.  # noqa: E501
        :type permission: str
        """
        self.swagger_types = {
            'permission': str
        }

        self.attribute_map = {
            'permission': 'permission'
        }
        self._permission = permission

    @classmethod
    def from_dict(cls, dikt) -> 'UserAttributesPermissions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User_attributes_permissions of this UserAttributesPermissions.  # noqa: E501
        :rtype: UserAttributesPermissions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def permission(self) -> str:
        """Gets the permission of this UserAttributesPermissions.


        :return: The permission of this UserAttributesPermissions.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission: str):
        """Sets the permission of this UserAttributesPermissions.


        :param permission: The permission of this UserAttributesPermissions.
        :type permission: str
        """
        allowed_values = ["read", "write", "admin"]  # noqa: E501
        if permission not in allowed_values:
            raise ValueError(
                "Invalid value for `permission` ({0}), must be one of {1}"
                .format(permission, allowed_values)
            )

        self._permission = permission
