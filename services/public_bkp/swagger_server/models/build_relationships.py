# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.build_relationships_commit import BuildRelationshipsCommit  # noqa: F401,E501
from swagger_server.models.build_relationships_log import BuildRelationshipsLog  # noqa: F401,E501
from swagger_server.models.build_relationships_missingpackages import BuildRelationshipsMissingpackages  # noqa: F401,E501
from swagger_server.models.build_relationships_missingrecipes import BuildRelationshipsMissingrecipes  # noqa: F401,E501
from swagger_server.models.build_relationships_package import BuildRelationshipsPackage  # noqa: F401,E501
from swagger_server.models.build_relationships_profile import BuildRelationshipsProfile  # noqa: F401,E501
from swagger_server.models.repo_relationships_ecosystem import RepoRelationshipsEcosystem  # noqa: F401,E501
from swagger_server import util


class BuildRelationships(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ecosystem: RepoRelationshipsEcosystem=None, commit: BuildRelationshipsCommit=None, profile: BuildRelationshipsProfile=None, log: BuildRelationshipsLog=None, package: BuildRelationshipsPackage=None, missing_packages: BuildRelationshipsMissingpackages=None, missing_recipes: BuildRelationshipsMissingrecipes=None):  # noqa: E501
        """BuildRelationships - a model defined in Swagger

        :param ecosystem: The ecosystem of this BuildRelationships.  # noqa: E501
        :type ecosystem: RepoRelationshipsEcosystem
        :param commit: The commit of this BuildRelationships.  # noqa: E501
        :type commit: BuildRelationshipsCommit
        :param profile: The profile of this BuildRelationships.  # noqa: E501
        :type profile: BuildRelationshipsProfile
        :param log: The log of this BuildRelationships.  # noqa: E501
        :type log: BuildRelationshipsLog
        :param package: The package of this BuildRelationships.  # noqa: E501
        :type package: BuildRelationshipsPackage
        :param missing_packages: The missing_packages of this BuildRelationships.  # noqa: E501
        :type missing_packages: BuildRelationshipsMissingpackages
        :param missing_recipes: The missing_recipes of this BuildRelationships.  # noqa: E501
        :type missing_recipes: BuildRelationshipsMissingrecipes
        """
        self.swagger_types = {
            'ecosystem': RepoRelationshipsEcosystem,
            'commit': BuildRelationshipsCommit,
            'profile': BuildRelationshipsProfile,
            'log': BuildRelationshipsLog,
            'package': BuildRelationshipsPackage,
            'missing_packages': BuildRelationshipsMissingpackages,
            'missing_recipes': BuildRelationshipsMissingrecipes
        }

        self.attribute_map = {
            'ecosystem': 'ecosystem',
            'commit': 'commit',
            'profile': 'profile',
            'log': 'log',
            'package': 'package',
            'missing_packages': 'missing-packages',
            'missing_recipes': 'missing-recipes'
        }
        self._ecosystem = ecosystem
        self._commit = commit
        self._profile = profile
        self._log = log
        self._package = package
        self._missing_packages = missing_packages
        self._missing_recipes = missing_recipes

    @classmethod
    def from_dict(cls, dikt) -> 'BuildRelationships':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Build_relationships of this BuildRelationships.  # noqa: E501
        :rtype: BuildRelationships
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ecosystem(self) -> RepoRelationshipsEcosystem:
        """Gets the ecosystem of this BuildRelationships.


        :return: The ecosystem of this BuildRelationships.
        :rtype: RepoRelationshipsEcosystem
        """
        return self._ecosystem

    @ecosystem.setter
    def ecosystem(self, ecosystem: RepoRelationshipsEcosystem):
        """Sets the ecosystem of this BuildRelationships.


        :param ecosystem: The ecosystem of this BuildRelationships.
        :type ecosystem: RepoRelationshipsEcosystem
        """

        self._ecosystem = ecosystem

    @property
    def commit(self) -> BuildRelationshipsCommit:
        """Gets the commit of this BuildRelationships.


        :return: The commit of this BuildRelationships.
        :rtype: BuildRelationshipsCommit
        """
        return self._commit

    @commit.setter
    def commit(self, commit: BuildRelationshipsCommit):
        """Sets the commit of this BuildRelationships.


        :param commit: The commit of this BuildRelationships.
        :type commit: BuildRelationshipsCommit
        """

        self._commit = commit

    @property
    def profile(self) -> BuildRelationshipsProfile:
        """Gets the profile of this BuildRelationships.


        :return: The profile of this BuildRelationships.
        :rtype: BuildRelationshipsProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile: BuildRelationshipsProfile):
        """Sets the profile of this BuildRelationships.


        :param profile: The profile of this BuildRelationships.
        :type profile: BuildRelationshipsProfile
        """

        self._profile = profile

    @property
    def log(self) -> BuildRelationshipsLog:
        """Gets the log of this BuildRelationships.


        :return: The log of this BuildRelationships.
        :rtype: BuildRelationshipsLog
        """
        return self._log

    @log.setter
    def log(self, log: BuildRelationshipsLog):
        """Sets the log of this BuildRelationships.


        :param log: The log of this BuildRelationships.
        :type log: BuildRelationshipsLog
        """

        self._log = log

    @property
    def package(self) -> BuildRelationshipsPackage:
        """Gets the package of this BuildRelationships.


        :return: The package of this BuildRelationships.
        :rtype: BuildRelationshipsPackage
        """
        return self._package

    @package.setter
    def package(self, package: BuildRelationshipsPackage):
        """Sets the package of this BuildRelationships.


        :param package: The package of this BuildRelationships.
        :type package: BuildRelationshipsPackage
        """

        self._package = package

    @property
    def missing_packages(self) -> BuildRelationshipsMissingpackages:
        """Gets the missing_packages of this BuildRelationships.


        :return: The missing_packages of this BuildRelationships.
        :rtype: BuildRelationshipsMissingpackages
        """
        return self._missing_packages

    @missing_packages.setter
    def missing_packages(self, missing_packages: BuildRelationshipsMissingpackages):
        """Sets the missing_packages of this BuildRelationships.


        :param missing_packages: The missing_packages of this BuildRelationships.
        :type missing_packages: BuildRelationshipsMissingpackages
        """

        self._missing_packages = missing_packages

    @property
    def missing_recipes(self) -> BuildRelationshipsMissingrecipes:
        """Gets the missing_recipes of this BuildRelationships.


        :return: The missing_recipes of this BuildRelationships.
        :rtype: BuildRelationshipsMissingrecipes
        """
        return self._missing_recipes

    @missing_recipes.setter
    def missing_recipes(self, missing_recipes: BuildRelationshipsMissingrecipes):
        """Sets the missing_recipes of this BuildRelationships.


        :param missing_recipes: The missing_recipes of this BuildRelationships.
        :type missing_recipes: BuildRelationshipsMissingrecipes
        """

        self._missing_recipes = missing_recipes
