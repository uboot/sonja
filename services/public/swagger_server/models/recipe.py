# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.recipe_attributes import RecipeAttributes  # noqa: F401,E501
from swagger_server.models.recipe_relationships import RecipeRelationships  # noqa: F401,E501
from swagger_server import util


class Recipe(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, type: str=None, attributes: RecipeAttributes=None, relationships: RecipeRelationships=None):  # noqa: E501
        """Recipe - a model defined in Swagger

        :param id: The id of this Recipe.  # noqa: E501
        :type id: str
        :param type: The type of this Recipe.  # noqa: E501
        :type type: str
        :param attributes: The attributes of this Recipe.  # noqa: E501
        :type attributes: RecipeAttributes
        :param relationships: The relationships of this Recipe.  # noqa: E501
        :type relationships: RecipeRelationships
        """
        self.swagger_types = {
            'id': str,
            'type': str,
            'attributes': RecipeAttributes,
            'relationships': RecipeRelationships
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'attributes': 'attributes',
            'relationships': 'relationships'
        }
        self._id = id
        self._type = type
        self._attributes = attributes
        self._relationships = relationships

    @classmethod
    def from_dict(cls, dikt) -> 'Recipe':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Recipe of this Recipe.  # noqa: E501
        :rtype: Recipe
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Recipe.


        :return: The id of this Recipe.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Recipe.


        :param id: The id of this Recipe.
        :type id: str
        """

        self._id = id

    @property
    def type(self) -> str:
        """Gets the type of this Recipe.


        :return: The type of this Recipe.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Recipe.


        :param type: The type of this Recipe.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def attributes(self) -> RecipeAttributes:
        """Gets the attributes of this Recipe.


        :return: The attributes of this Recipe.
        :rtype: RecipeAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes: RecipeAttributes):
        """Sets the attributes of this Recipe.


        :param attributes: The attributes of this Recipe.
        :type attributes: RecipeAttributes
        """

        self._attributes = attributes

    @property
    def relationships(self) -> RecipeRelationships:
        """Gets the relationships of this Recipe.


        :return: The relationships of this Recipe.
        :rtype: RecipeRelationships
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships: RecipeRelationships):
        """Sets the relationships of this Recipe.


        :param relationships: The relationships of this Recipe.
        :type relationships: RecipeRelationships
        """

        self._relationships = relationships
