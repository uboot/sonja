# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.profile_attributes_options import ProfileAttributesOptions  # noqa: F401,E501
from swagger_server.models.profile_attributes_settings import ProfileAttributesSettings  # noqa: F401,E501
from swagger_server.models.repo_attributes_exclude import RepoAttributesExclude  # noqa: F401,E501
from swagger_server import util


class ProfileAttributes(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, container: str=None, docker_user: str=None, docker_password: str=None, settings: List[ProfileAttributesSettings]=None, options: List[ProfileAttributesOptions]=None, labels: List[RepoAttributesExclude]=None):  # noqa: E501
        """ProfileAttributes - a model defined in Swagger

        :param name: The name of this ProfileAttributes.  # noqa: E501
        :type name: str
        :param container: The container of this ProfileAttributes.  # noqa: E501
        :type container: str
        :param docker_user: The docker_user of this ProfileAttributes.  # noqa: E501
        :type docker_user: str
        :param docker_password: The docker_password of this ProfileAttributes.  # noqa: E501
        :type docker_password: str
        :param settings: The settings of this ProfileAttributes.  # noqa: E501
        :type settings: List[ProfileAttributesSettings]
        :param options: The options of this ProfileAttributes.  # noqa: E501
        :type options: List[ProfileAttributesOptions]
        :param labels: The labels of this ProfileAttributes.  # noqa: E501
        :type labels: List[RepoAttributesExclude]
        """
        self.swagger_types = {
            'name': str,
            'container': str,
            'docker_user': str,
            'docker_password': str,
            'settings': List[ProfileAttributesSettings],
            'options': List[ProfileAttributesOptions],
            'labels': List[RepoAttributesExclude]
        }

        self.attribute_map = {
            'name': 'name',
            'container': 'container',
            'docker_user': 'docker-user',
            'docker_password': 'docker-password',
            'settings': 'settings',
            'options': 'options',
            'labels': 'labels'
        }
        self._name = name
        self._container = container
        self._docker_user = docker_user
        self._docker_password = docker_password
        self._settings = settings
        self._options = options
        self._labels = labels

    @classmethod
    def from_dict(cls, dikt) -> 'ProfileAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Profile_attributes of this ProfileAttributes.  # noqa: E501
        :rtype: ProfileAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ProfileAttributes.


        :return: The name of this ProfileAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ProfileAttributes.


        :param name: The name of this ProfileAttributes.
        :type name: str
        """

        self._name = name

    @property
    def container(self) -> str:
        """Gets the container of this ProfileAttributes.


        :return: The container of this ProfileAttributes.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container: str):
        """Sets the container of this ProfileAttributes.


        :param container: The container of this ProfileAttributes.
        :type container: str
        """

        self._container = container

    @property
    def docker_user(self) -> str:
        """Gets the docker_user of this ProfileAttributes.


        :return: The docker_user of this ProfileAttributes.
        :rtype: str
        """
        return self._docker_user

    @docker_user.setter
    def docker_user(self, docker_user: str):
        """Sets the docker_user of this ProfileAttributes.


        :param docker_user: The docker_user of this ProfileAttributes.
        :type docker_user: str
        """

        self._docker_user = docker_user

    @property
    def docker_password(self) -> str:
        """Gets the docker_password of this ProfileAttributes.


        :return: The docker_password of this ProfileAttributes.
        :rtype: str
        """
        return self._docker_password

    @docker_password.setter
    def docker_password(self, docker_password: str):
        """Sets the docker_password of this ProfileAttributes.


        :param docker_password: The docker_password of this ProfileAttributes.
        :type docker_password: str
        """

        self._docker_password = docker_password

    @property
    def settings(self) -> List[ProfileAttributesSettings]:
        """Gets the settings of this ProfileAttributes.


        :return: The settings of this ProfileAttributes.
        :rtype: List[ProfileAttributesSettings]
        """
        return self._settings

    @settings.setter
    def settings(self, settings: List[ProfileAttributesSettings]):
        """Sets the settings of this ProfileAttributes.


        :param settings: The settings of this ProfileAttributes.
        :type settings: List[ProfileAttributesSettings]
        """

        self._settings = settings

    @property
    def options(self) -> List[ProfileAttributesOptions]:
        """Gets the options of this ProfileAttributes.


        :return: The options of this ProfileAttributes.
        :rtype: List[ProfileAttributesOptions]
        """
        return self._options

    @options.setter
    def options(self, options: List[ProfileAttributesOptions]):
        """Sets the options of this ProfileAttributes.


        :param options: The options of this ProfileAttributes.
        :type options: List[ProfileAttributesOptions]
        """

        self._options = options

    @property
    def labels(self) -> List[RepoAttributesExclude]:
        """Gets the labels of this ProfileAttributes.


        :return: The labels of this ProfileAttributes.
        :rtype: List[RepoAttributesExclude]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: List[RepoAttributesExclude]):
        """Sets the labels of this ProfileAttributes.


        :param labels: The labels of this ProfileAttributes.
        :type labels: List[RepoAttributesExclude]
        """

        self._labels = labels
