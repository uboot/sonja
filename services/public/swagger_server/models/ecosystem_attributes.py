# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class EcosystemAttributes(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, user: str=None, conan_remote: str=None, conan_config_url: str=None, conan_config_path: str=None, conan_config_branch: str=None, conan_user: str=None, conan_password: str=None, public_ssh_key: str=None, known_hosts: str=None):  # noqa: E501
        """EcosystemAttributes - a model defined in Swagger

        :param name: The name of this EcosystemAttributes.  # noqa: E501
        :type name: str
        :param user: The user of this EcosystemAttributes.  # noqa: E501
        :type user: str
        :param conan_remote: The conan_remote of this EcosystemAttributes.  # noqa: E501
        :type conan_remote: str
        :param conan_config_url: The conan_config_url of this EcosystemAttributes.  # noqa: E501
        :type conan_config_url: str
        :param conan_config_path: The conan_config_path of this EcosystemAttributes.  # noqa: E501
        :type conan_config_path: str
        :param conan_config_branch: The conan_config_branch of this EcosystemAttributes.  # noqa: E501
        :type conan_config_branch: str
        :param conan_user: The conan_user of this EcosystemAttributes.  # noqa: E501
        :type conan_user: str
        :param conan_password: The conan_password of this EcosystemAttributes.  # noqa: E501
        :type conan_password: str
        :param public_ssh_key: The public_ssh_key of this EcosystemAttributes.  # noqa: E501
        :type public_ssh_key: str
        :param known_hosts: The known_hosts of this EcosystemAttributes.  # noqa: E501
        :type known_hosts: str
        """
        self.swagger_types = {
            'name': str,
            'user': str,
            'conan_remote': str,
            'conan_config_url': str,
            'conan_config_path': str,
            'conan_config_branch': str,
            'conan_user': str,
            'conan_password': str,
            'public_ssh_key': str,
            'known_hosts': str
        }

        self.attribute_map = {
            'name': 'name',
            'user': 'user',
            'conan_remote': 'conan-remote',
            'conan_config_url': 'conan-config-url',
            'conan_config_path': 'conan-config-path',
            'conan_config_branch': 'conan-config-branch',
            'conan_user': 'conan-user',
            'conan_password': 'conan-password',
            'public_ssh_key': 'public-ssh-key',
            'known_hosts': 'known-hosts'
        }
        self._name = name
        self._user = user
        self._conan_remote = conan_remote
        self._conan_config_url = conan_config_url
        self._conan_config_path = conan_config_path
        self._conan_config_branch = conan_config_branch
        self._conan_user = conan_user
        self._conan_password = conan_password
        self._public_ssh_key = public_ssh_key
        self._known_hosts = known_hosts

    @classmethod
    def from_dict(cls, dikt) -> 'EcosystemAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Ecosystem_attributes of this EcosystemAttributes.  # noqa: E501
        :rtype: EcosystemAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this EcosystemAttributes.


        :return: The name of this EcosystemAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this EcosystemAttributes.


        :param name: The name of this EcosystemAttributes.
        :type name: str
        """

        self._name = name

    @property
    def user(self) -> str:
        """Gets the user of this EcosystemAttributes.


        :return: The user of this EcosystemAttributes.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this EcosystemAttributes.


        :param user: The user of this EcosystemAttributes.
        :type user: str
        """

        self._user = user

    @property
    def conan_remote(self) -> str:
        """Gets the conan_remote of this EcosystemAttributes.


        :return: The conan_remote of this EcosystemAttributes.
        :rtype: str
        """
        return self._conan_remote

    @conan_remote.setter
    def conan_remote(self, conan_remote: str):
        """Sets the conan_remote of this EcosystemAttributes.


        :param conan_remote: The conan_remote of this EcosystemAttributes.
        :type conan_remote: str
        """

        self._conan_remote = conan_remote

    @property
    def conan_config_url(self) -> str:
        """Gets the conan_config_url of this EcosystemAttributes.


        :return: The conan_config_url of this EcosystemAttributes.
        :rtype: str
        """
        return self._conan_config_url

    @conan_config_url.setter
    def conan_config_url(self, conan_config_url: str):
        """Sets the conan_config_url of this EcosystemAttributes.


        :param conan_config_url: The conan_config_url of this EcosystemAttributes.
        :type conan_config_url: str
        """

        self._conan_config_url = conan_config_url

    @property
    def conan_config_path(self) -> str:
        """Gets the conan_config_path of this EcosystemAttributes.


        :return: The conan_config_path of this EcosystemAttributes.
        :rtype: str
        """
        return self._conan_config_path

    @conan_config_path.setter
    def conan_config_path(self, conan_config_path: str):
        """Sets the conan_config_path of this EcosystemAttributes.


        :param conan_config_path: The conan_config_path of this EcosystemAttributes.
        :type conan_config_path: str
        """

        self._conan_config_path = conan_config_path

    @property
    def conan_config_branch(self) -> str:
        """Gets the conan_config_branch of this EcosystemAttributes.


        :return: The conan_config_branch of this EcosystemAttributes.
        :rtype: str
        """
        return self._conan_config_branch

    @conan_config_branch.setter
    def conan_config_branch(self, conan_config_branch: str):
        """Sets the conan_config_branch of this EcosystemAttributes.


        :param conan_config_branch: The conan_config_branch of this EcosystemAttributes.
        :type conan_config_branch: str
        """

        self._conan_config_branch = conan_config_branch

    @property
    def conan_user(self) -> str:
        """Gets the conan_user of this EcosystemAttributes.


        :return: The conan_user of this EcosystemAttributes.
        :rtype: str
        """
        return self._conan_user

    @conan_user.setter
    def conan_user(self, conan_user: str):
        """Sets the conan_user of this EcosystemAttributes.


        :param conan_user: The conan_user of this EcosystemAttributes.
        :type conan_user: str
        """

        self._conan_user = conan_user

    @property
    def conan_password(self) -> str:
        """Gets the conan_password of this EcosystemAttributes.


        :return: The conan_password of this EcosystemAttributes.
        :rtype: str
        """
        return self._conan_password

    @conan_password.setter
    def conan_password(self, conan_password: str):
        """Sets the conan_password of this EcosystemAttributes.


        :param conan_password: The conan_password of this EcosystemAttributes.
        :type conan_password: str
        """

        self._conan_password = conan_password

    @property
    def public_ssh_key(self) -> str:
        """Gets the public_ssh_key of this EcosystemAttributes.


        :return: The public_ssh_key of this EcosystemAttributes.
        :rtype: str
        """
        return self._public_ssh_key

    @public_ssh_key.setter
    def public_ssh_key(self, public_ssh_key: str):
        """Sets the public_ssh_key of this EcosystemAttributes.


        :param public_ssh_key: The public_ssh_key of this EcosystemAttributes.
        :type public_ssh_key: str
        """

        self._public_ssh_key = public_ssh_key

    @property
    def known_hosts(self) -> str:
        """Gets the known_hosts of this EcosystemAttributes.


        :return: The known_hosts of this EcosystemAttributes.
        :rtype: str
        """
        return self._known_hosts

    @known_hosts.setter
    def known_hosts(self, known_hosts: str):
        """Sets the known_hosts of this EcosystemAttributes.


        :param known_hosts: The known_hosts of this EcosystemAttributes.
        :type known_hosts: str
        """

        self._known_hosts = known_hosts
