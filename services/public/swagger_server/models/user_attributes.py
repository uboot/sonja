# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UserAttributes(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_name: str=None, first_name: str=None, last_name: str=None, email: str=None, password: str=None, old_password: str=None, permissions: List[str]=None):  # noqa: E501
        """UserAttributes - a model defined in Swagger

        :param user_name: The user_name of this UserAttributes.  # noqa: E501
        :type user_name: str
        :param first_name: The first_name of this UserAttributes.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this UserAttributes.  # noqa: E501
        :type last_name: str
        :param email: The email of this UserAttributes.  # noqa: E501
        :type email: str
        :param password: The password of this UserAttributes.  # noqa: E501
        :type password: str
        :param old_password: The old_password of this UserAttributes.  # noqa: E501
        :type old_password: str
        :param permissions: The permissions of this UserAttributes.  # noqa: E501
        :type permissions: List[str]
        """
        self.swagger_types = {
            'user_name': str,
            'first_name': str,
            'last_name': str,
            'email': str,
            'password': str,
            'old_password': str,
            'permissions': List[str]
        }

        self.attribute_map = {
            'user_name': 'user-name',
            'first_name': 'first-name',
            'last_name': 'last-name',
            'email': 'email',
            'password': 'password',
            'old_password': 'old-password',
            'permissions': 'permissions'
        }
        self._user_name = user_name
        self._first_name = first_name
        self._last_name = last_name
        self._email = email
        self._password = password
        self._old_password = old_password
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt) -> 'UserAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User_attributes of this UserAttributes.  # noqa: E501
        :rtype: UserAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_name(self) -> str:
        """Gets the user_name of this UserAttributes.


        :return: The user_name of this UserAttributes.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this UserAttributes.


        :param user_name: The user_name of this UserAttributes.
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def first_name(self) -> str:
        """Gets the first_name of this UserAttributes.


        :return: The first_name of this UserAttributes.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this UserAttributes.


        :param first_name: The first_name of this UserAttributes.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this UserAttributes.


        :return: The last_name of this UserAttributes.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this UserAttributes.


        :param last_name: The last_name of this UserAttributes.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def email(self) -> str:
        """Gets the email of this UserAttributes.


        :return: The email of this UserAttributes.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this UserAttributes.


        :param email: The email of this UserAttributes.
        :type email: str
        """

        self._email = email

    @property
    def password(self) -> str:
        """Gets the password of this UserAttributes.


        :return: The password of this UserAttributes.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this UserAttributes.


        :param password: The password of this UserAttributes.
        :type password: str
        """

        self._password = password

    @property
    def old_password(self) -> str:
        """Gets the old_password of this UserAttributes.


        :return: The old_password of this UserAttributes.
        :rtype: str
        """
        return self._old_password

    @old_password.setter
    def old_password(self, old_password: str):
        """Sets the old_password of this UserAttributes.


        :param old_password: The old_password of this UserAttributes.
        :type old_password: str
        """

        self._old_password = old_password

    @property
    def permissions(self) -> List[str]:
        """Gets the permissions of this UserAttributes.


        :return: The permissions of this UserAttributes.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions: List[str]):
        """Sets the permissions of this UserAttributes.


        :param permissions: The permissions of this UserAttributes.
        :type permissions: List[str]
        """
        allowed_values = ["read", "write", "admin"]  # noqa: E501
        if not set(permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._permissions = permissions
