function ThrowOnNonZero {
    if (-not $$?) {
        throw 'Last command failed'
    }
}

echo '### Setup MTU ###'
$$adapters = $$(Get-NetAdapter | Where { $$_.Name -Match 'Ethernet' }).Name
$$adapters | ForEach-Object({
    netsh interface ipv4 set subinterface "$$_" mtu=1450 store=persistent
})

echo '### Setup SSH ###'
mkdir -p "$$env:userprofile\.ssh"; ThrowOnNonZero
Copy-Item "$build_package_dir\id_rsa" -Destination "$$env:userprofile\.ssh"; ThrowOnNonZero
Copy-Item "$build_package_dir\known_hosts" -Destination "$$env:userprofile\.ssh"; ThrowOnNonZero

echo '### Setup Conan ###'
mkdir -p "$$env:userprofile\.conan"; ThrowOnNonZero
if (Test-Path -Path "$build_package_dir\settings.yml" -PathType Leaf) {
    echo '# Copy Conan settings'
    Copy-Item "$build_package_dir\settings.yml" -Destination "$$env:userprofile\.conan"; ThrowOnNonZero
}

echo '# Clean remotes'
conan remote clean; ThrowOnNonZero

echo '# Add Conan server'
conan remote add server $conan_remote $conan_verify_ssl; ThrowOnNonZero

echo '# Setup Conan user'
conan user -r server -p $conan_password $conan_user; ThrowOnNonZero

echo '# Enable Conan revisions'
conan config set general.revisions_enabled=1; ThrowOnNonZero

echo '### Clone repository ###'
mkdir conanci; ThrowOnNonZero
cd conanci; ThrowOnNonZero
git init; ThrowOnNonZero
git remote add origin $git_url; ThrowOnNonZero
git fetch origin $git_sha; ThrowOnNonZero
git checkout FETCH_HEAD; ThrowOnNonZero

echo '### Build package ###'
mkdir -p "$build_output_dir"; ThrowOnNonZero
$$package_name=[string](conan inspect --raw name $path); ThrowOnNonZero
$$package_version=[string](conan inspect --raw version $path); ThrowOnNonZero
conan create $conan_args --json $build_output_dir\create.json $path @$conanci_user/$channel; ThrowOnNonZero
conan upload $$package_name/$$package_version@$conanci_user/$channel --all --confirm -r server; ThrowOnNonZero